import turtle
import bit
import time
import random

adj=[-1,0,1] #possible directions for blawks
blist=[] #list of blawks
flist=[] #list of food
tlist=[] #trail behind
slist=[] #shoot
col=['red','orange','yellow','green','blue','purple']
movem=[[],[]] #check where buddies are
empty=[[],[]] #check where space is empty

size=20
multi=4
bit.size(size)
def setup():
    tl.goto(0,size*multi)
    tl.goto(0,-size*multi)
    tl.up()
    tl.goto(-size*multi,0)
    tl.pd()
    tl.goto(size*multi,0)
    tl.up()
    tl.goto(-size*multi,-size*multi)
    tl.pd()
    tl.goto(-size*multi,size*multi)
    tl.goto(size*multi,size*multi)
    tl.goto(size*multi,-size*multi)
    tl.goto(-size*multi,-size*multi)
def movec(turt, dirx, diry): #checks if move is possible FINISH
    if ((turt.xcor()+dirx*(size)<size*multi-1
    and turt.xcor()+dirx*(size)>-size*multi-1
    and turt.ycor()+diry*(size)<size*multi-1
    and turt.ycor()+diry*(size)>-size*multi-1) is False):
        return False;
    counter=0
    while (counter<len(movem[0])):
        if (int(round(turt.xcor()))+dirx*(size)==movem[0][counter] and
            int(round(turt.ycor()))+diry*(size)==movem[1][counter]):
            return False;
        counter+=1
    return True;
def move(turt, scrn, num): #moves the blawk in a random direction
    n=2
    dirx=adj[random.randint(0,n)] #x-direction
    diry=adj[random.randint(0,n)] #y-direction
    counter=0
    while (movec(turt, dirx, diry) is False and counter<5):
        dirx=adj[random.randint(0,n)]
        diry=adj[random.randint(0,n)]
        counter+=1
        #if (movec(turt, dirx, diry) and turt.xcor()+dirx*(size)<scrn.window_width()/2
        #and turt.xcor()+dirx*(size)>-scrn.window_width()/2
        #and turt.ycor()+diry*(size)<scrn.window_height()/2
        #and turt.ycor()+diry*(size)>-scrn.window_height()/2):
    if (movec(turt, dirx, diry)): #in case loop is exited without move available
        bit.bit(turt.xcor()+dirx*(size),turt.ycor()+diry*(size),turt)
        movem[0][num]=int(round(turt.xcor()))
        movem[1][num]=int(round(turt.ycor()))
    else:
        bit.bit(turt.xcor(),turt.ycor(),turt)
        movem[0][num]=int(round(turt.xcor()))
        movem[1][num]=int(round(turt.ycor()))
    #if (n%100):
     #   i=0
      #  while (i<len(slist)):
       #     a
def turn(blist, scrn):
    time.sleep(0.01) #pauses/speed
    i=0
    while (i<len(blist)):
        blist[i].clear()
        i+=1
    i=0
    while (i<len(blist)):
        move(blist[i], scrn, i)
        #bit.bit(blist[i].xcor(), blist[i].ycor(), tlist[i]) #leave color trail
        #bit.bit(blist[i].xcor(), blist[i].ycor(), blist[i])
        i+=1
    i=0
    scrn.update()
def foodspawn(turt):
    counter=0
    while (movec(turt, dirx, diry) is False and blist.size<multi*multi*4):
        dirx=adj[random.randint(0,n)]
        diry=adj[random.randint(0,n)]
def shoot(slist, scrn):
    i=0
    while(i<len(slist)):
        slist[i][0].goto(slist[i][1]*10,slist[i][2]*10)
s=turtle.Screen()
t1=turtle.Turtle()
blist.append(t1)
movem[0].append(0)
movem[1].append(0)
t1.ht()
s.tracer(0,0)
t2=t1.clone()
t2.clear()
t3=t1.clone()
t3.clear()
tlist.append(t3)
t4=t2.clone()
t4.clear()
tlist.append(t4)
blist.append(t2)
tl=t2.clone()
setup()
t2.color("brown")
bit.bit(0,0,t1)
bit.bit(size,size,t2)
bit.bit(0,0,t1)
bit.bit(size,size,t2)
movem[0].append(10)
movem[1].append(10)
s.update()
i=0 #color number
n=1 #turn number
a=0 #used for going through lists
while (True):
    while(a<len(tlist)):
        tlist[a].color(col[i])
        a+=1
    a=0
    turn(blist, s)
    i+=1
    n+=1
    if (i==6):
        i=0
    #bud after 50 turns
    if(n%6==0):
        blist.append(t1.clone())
        movem[0].append(int(round(blist[len(blist)-1].xcor())))
        movem[1].append(int(round(blist[len(blist)-1].ycor())))
        blist[len(blist)-1].clear()
        tlist.append(t1.clone())
        tlist[len(blist)-1].clear()
    #if(n%100==0):
    #    i=len(slist)
    #    a=i
    #    while(i<len(blist)):
    #        slist.append('t'+str(a))
    #        i+=1
    #    i=0
    #    while(i<len(blist)):
    #        slist[i][0].up()
    #        slist[i][0].goto(blist[i].xcor()+(size-1)/2,blist[i].ycor()+(size-1)/2)
    #        slist[i][0].pd()
    #        i+=1
